{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;AAGA,sCAA6D;AAG7D,6DAAsD;AACtD,uEAAiE;AAWjE;IAKE,wBAAoB,MAAc,EACxB,qBAA4C,EAC5C,mBAAwC;QAF9B,WAAM,GAAN,MAAM,CAAQ;QACxB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,wBAAmB,GAAnB,mBAAmB,CAAqB;QAL1C,kBAAa,GAAmB,EAAE,CAAC;IAKW,CAAC;IAEvD,iCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACpC;IACH,CAAC;IAED,gCAAO,GAAP,UAAQ,IAAU;QAAlB,iBAmBC;QAlBC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;YAC/C,IAAI,EAAE,UAAC,QAAkC;gBACvC,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,6BAAU,CAAC,SAAS,CAAC,CAAC;gBACzD,KAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC5C,KAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC9D,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;gBAC7C,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,CAAC;YACD,KAAK,EAAE,UAAC,YAA+B;gBACrC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC1B,KAAI,CAAC,qBAAqB,CAAC,wCAAgB,CAAC,KAAK,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;gBACzE,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,CAAC;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,8CAAqB,GAA7B,UAA8B,gBAAkC,EAAE,OAAe;QAC/E,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,mCAAmC,CAAC,CAAC;SACxF;IACH,CAAC;IAED,oCAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC,CAAC;IACvD,CAAC;IAhDU,cAAc;QAL1B,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;SACrC,CAAC;OACW,cAAc,CAiD1B;IAAD,qBAAC;CAjDD,AAiDC,IAAA;AAjDY,wCAAc","file":"login.component.js","sourcesContent":["\nimport { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { HeaderType } from \"../enum/header-type.enum\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { User } from \"../model/user\";\nimport { CustomHttpRespone } from '../model/custom-http-response';\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  showLoading: boolean;\n  private subscriptions: Subscription[] = [];\n  Observable: any;\n\n  constructor(private router: Router,\n    private authenticationService: AuthenticationService,\n    private notificationService: NotificationService) { }\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('Dashboard');\n    } else {\n      this.router.navigateByUrl(\"login\");\n    }\n  }\n\n  onLogin(user: User): void {\n    this.showLoading = true;\n    console.log(user);\n    this.subscriptions.push(\n      this.authenticationService.login(user).subscribe({\n        next: (Response: HttpResponse<User> | any) => {\n          const token = Response.headers.get(HeaderType.JWT_TOKEN);\n          this.authenticationService.saveToken(token);\n          this.authenticationService.addUserToLocalCache(Response.body);\n          this.router.navigateByUrl('user/management');\n          this.showLoading = false;\n        },\n        error: (errorREponse: HttpErrorResponse) => {\n          console.log(errorREponse);\n          this.sendErrorNotification(NotificationType.ERROR, errorREponse.message);\n          this.showLoading = false;\n        }\n      })\n    );\n  }\n\n  private sendErrorNotification(notificationType: NotificationType, message: string) {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occured,please try again');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n\n\n\n"]}