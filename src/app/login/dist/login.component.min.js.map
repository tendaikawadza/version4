{"version":3,"sources":["login.component.ts"],"names":["core_1","require","header_type_enum_1","notificaton_type_enum_1","LoginComponent","router","authenticationService","notificationService","this","subscriptions","prototype","ngOnInit","isUserLoggedIn","navigateByUrl","onLogin","user","_this","showLoading","console","log","push","login","subscribe","next","Response","token","headers","get","HeaderType","JWT_TOKEN","saveToken","addUserToLocalCache","body","error","errorREponse","sendErrorNotification","NotificationType","ERROR","message","notificationType","notify","ngOnDestroy","forEach","sub","unsubscribe","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAGA,IAAAA,OAAAC,QAAA,iBAGAC,mBAAAD,QAAA,4BACAE,wBAAAF,QAAA,iCAWAG,eAAA,WAKE,SAAAA,EAAoBC,EACVC,EACAC,GAFUC,KAAAH,OAAAA,EACVG,KAAAF,sBAAAA,EACAE,KAAAD,oBAAAA,EALFC,KAAAC,cAAgC,GA+C1C,OAxCEL,EAAAM,UAAAC,SAAA,WACMH,KAAKF,sBAAsBM,iBAC7BJ,KAAKH,OAAOQ,cAAc,aAE1BL,KAAKH,OAAOQ,cAAc,UAI9BT,EAAAM,UAAAI,QAAA,SAAQC,GAAR,IAAAC,EAAAR,KACEA,KAAKS,aAAc,EACnBC,QAAQC,IAAIJ,GACZP,KAAKC,cAAcW,KACjBZ,KAAKF,sBAAsBe,MAAMN,GAAMO,UAAU,CAC/CC,KAAM,SAACC,GACL,IAAMC,EAAQD,EAASE,QAAQC,IAAIzB,mBAAA0B,WAAWC,WAC9Cb,EAAKV,sBAAsBwB,UAAUL,GACrCT,EAAKV,sBAAsByB,oBAAoBP,EAASQ,MACxDhB,EAAKX,OAAOQ,cAAc,mBAC1BG,EAAKC,aAAc,GAErBgB,MAAO,SAACC,GACNhB,QAAQC,IAAIe,GACZlB,EAAKmB,sBAAsBhC,wBAAAiC,iBAAiBC,MAAOH,EAAaI,SAChEtB,EAAKC,aAAc,OAMnBb,EAAAM,UAAAyB,sBAAR,SAA8BI,EAAoCD,GAC5DA,EACF9B,KAAKD,oBAAoBiC,OAAOD,EAAkBD,GAElD9B,KAAKD,oBAAoBiC,OAAOD,EAAkB,sCAItDnC,EAAAM,UAAA+B,YAAA,WACEjC,KAAKC,cAAciC,QAAQ,SAAAC,GAAO,OAAAA,EAAIC,iBA/C7BxC,EAAcyC,WAAA,CAL1B7C,OAAA8C,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAED7C,GAAb,GAAa8C,QAAA9C,eAAAA","file":"login.component.min.js","sourcesContent":["\nimport { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { HeaderType } from \"../enum/header-type.enum\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { User } from \"../model/user\";\nimport { CustomHttpRespone } from '../model/custom-http-response';\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  showLoading: boolean;\n  private subscriptions: Subscription[] = [];\n  Observable: any;\n\n  constructor(private router: Router,\n    private authenticationService: AuthenticationService,\n    private notificationService: NotificationService) { }\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('Dashboard');\n    } else {\n      this.router.navigateByUrl(\"login\");\n    }\n  }\n\n  onLogin(user: User): void {\n    this.showLoading = true;\n    console.log(user);\n    this.subscriptions.push(\n      this.authenticationService.login(user).subscribe({\n        next: (Response: HttpResponse<User> | any) => {\n          const token = Response.headers.get(HeaderType.JWT_TOKEN);\n          this.authenticationService.saveToken(token);\n          this.authenticationService.addUserToLocalCache(Response.body);\n          this.router.navigateByUrl('user/management');\n          this.showLoading = false;\n        },\n        error: (errorREponse: HttpErrorResponse) => {\n          console.log(errorREponse);\n          this.sendErrorNotification(NotificationType.ERROR, errorREponse.message);\n          this.showLoading = false;\n        }\n      })\n    );\n  }\n\n  private sendErrorNotification(notificationType: NotificationType, message: string) {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occured,please try again');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n}\n\n\n\n"]}